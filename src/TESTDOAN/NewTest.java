package TESTDOAN;

import org.testng.annotations.Test;
import Pages.LienhePage;

import org.testng.annotations.BeforeTest;
import org.testng.annotations.AfterTest;
import org.json.simple.JSONArray;
import org.json.simple.JSONObject;
import org.json.simple.parser.JSONParser;
import org.json.simple.parser.ParseException;
import org.openqa.selenium.By;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.chrome.ChromeDriver;
import org.openqa.selenium.support.ui.WebDriverWait;
import org.openqa.selenium.support.ui.ExpectedConditions;
import org.testng.Assert;

import java.io.FileReader;
import java.io.IOException;
import java.time.Duration;
import java.util.Random;

public class NewTest {
    WebDriver driver;
    WebDriverWait wait;
    String generatedMaNganh;
    String generatedTenNguoiDung;
    String generatedMaGV;
    @BeforeTest
    public void beforeTest() {
        System.setProperty("webdriver.chrome.driver", "C:\\chromedriver.exe");

        driver = new ChromeDriver(); // G√°n v√†o bi·∫øn to√†n c·ª•c
        driver.manage().window().maximize();
        wait = new WebDriverWait(driver,10); // Ch·ªù t·ªëi ƒëa 10 gi√¢y

        driver.get("https://cntttest.vanlanguni.edu.vn:18081/Phancong02/");

        // X·ª≠ l√Ω b·∫£o m·∫≠t (n·∫øu c√≥)
        try {
            wait.until(ExpectedConditions.visibilityOfElementLocated(By.id("details-button"))).click();
            wait.until(ExpectedConditions.visibilityOfElementLocated(By.id("proceed-link"))).click();
        } catch (Exception e) {
            System.out.println("Kh√¥ng c·∫ßn b·ªè qua c·∫£nh b√°o b·∫£o m·∫≠t.");
        }
    }



    @Test(priority = 1)
    public void testDangNhapThanhCong() throws InterruptedException, IOException, ParseException {
        System.out.println("üîπ Testcase 1: ƒêƒÉng nh·∫≠p th√†nh c√¥ng");

        LienhePage lienhe = new LienhePage(driver);
        FileReader reader = new FileReader("C:\\dulieu.json");

        JSONParser jsonparser = new JSONParser();

        Object obj = jsonparser.parse(reader);

        JSONObject empjsonobj = (JSONObject) obj;
        JSONArray array = (JSONArray) empjsonobj.get("info");
        
        for (int i = 0; i < array.size(); i++) {
            JSONObject info = (JSONObject) array.get(i);
            String name = (String) info.get("Email");
            String matkhau = (String) info.get("Password");
    
           
        lienhe.login(name, matkhau);
        }
    }

    @Test(priority = 2)
    public void testTaoNganh() throws InterruptedException, IOException, ParseException {
        System.out.println("üîπ Testcase: TC2: T·∫°o ng√†nh h·ªçc");
        LienhePage lienhe = new LienhePage(driver);
        Random random = new Random();

        // üîπ T·∫°o m√£ ng√†nh ng·∫´u nhi√™n (s·ªë t·ª´ 1000 ƒë·∫øn 9999)
        generatedMaNganh = String.valueOf(1000 + random.nextInt(9000));
        System.out.println("üÜï M√£ ng√†nh ƒë∆∞·ª£c sinh: " + generatedMaNganh);
 

        FileReader reader = new FileReader("C:\\dulieu.json");
        JSONParser jsonparser = new JSONParser();
        Object obj = jsonparser.parse(reader);
        JSONObject empjsonobj = (JSONObject) obj;
        JSONArray array = (JSONArray) empjsonobj.get("info");

        for (int i = 0; i < array.size(); i++) {
            JSONObject info = (JSONObject) array.get(i);
            String tennganh = (String) info.get("TenNganh");
            String tenviettat = (String) info.get("TenVietTat");
            String manganh = (String) info.get("MaNganh");  // ƒë·ªçc m√£ ng√†nh n·∫øu c√≥ s·∫µn

            System.out.println("üìå ƒê·ªçc t·ª´ JSON: T√™n ng√†nh = " + tennganh + ", Vi·∫øt t·∫Øt = " + tenviettat);

            Thread.sleep(1000);
            if (tennganh != null && !tennganh.isEmpty() && tenviettat != null && !tenviettat.isEmpty()) {
                System.out.println("‚úÖ PASS: D·ªØ li·ªáu t·ª´ JSON h·ª£p l·ªá!");

                // T·∫°o m√£ ng√†nh ng·∫´u nhi√™n n·∫øu ch∆∞a c√≥
                if (manganh == null || manganh.isEmpty()) {
                    manganh = String.valueOf(1000 + random.nextInt(9000));
                }

                lienhe.openNganhHocPage();
                lienhe.clickThemNganh();
                lienhe.nhapThongTinNganh(manganh, tennganh, tenviettat);
                lienhe.chonCTDT();
                lienhe.clickLuu();

                System.out.println("‚úîÔ∏è ƒê√£ nh·∫≠p ng√†nh h·ªçc: [M√£: " + manganh + "] - [T√™n: " + tennganh + "] - [Vi·∫øt t·∫Øt: " + tenviettat + "]");
            } 
        }
    }


    @Test(priority = 3)
    public void testtimkiem() throws InterruptedException {
        System.out.println("\uD83D\uDD39 Testcase: TC3: T√¨m ki·∫øm ng√†nh v·ª´a t·∫°o");
        LienhePage lienhe = new LienhePage(driver);

        if (generatedMaNganh != null) {
            lienhe.nhaptimkiem(generatedMaNganh);
            Thread.sleep(2000);

            String xpathKetQua = "//table/tbody/tr[1]/td[2]";
            String actualMaNganh = driver.findElement(By.xpath(xpathKetQua)).getText().trim();

            System.out.println("üîç Ki·ªÉm tra k·∫øt qu·∫£ t√¨m ki·∫øm...");
            System.out.println("Th·ª±c t·∫ø: " + actualMaNganh + " | Mong ƒë·ª£i: " + generatedMaNganh);

            if (actualMaNganh.equals(generatedMaNganh)) {
                System.out.println("‚úÖ PASS: ƒê√£ t√¨m ki·∫øm ƒë√∫ng m√£ ng√†nh: " + actualMaNganh);
            } else {
                System.out.println("‚ùå FAIL: M√£ ng√†nh t√¨m ki·∫øm kh√¥ng kh·ªõp! (Th·ª±c t·∫ø: \"" + actualMaNganh + "\", Mong ƒë·ª£i: \"" + generatedMaNganh + "\")");
            }
            
            Assert.assertEquals(actualMaNganh, generatedMaNganh, "‚ùå FAIL: K·∫øt qu·∫£ t√¨m ki·∫øm kh√¥ng ƒë√∫ng!");
        } else {
            System.out.println("‚ö† L·ªói: M√£ ng√†nh ch∆∞a ƒë∆∞·ª£c t·∫°o tr∆∞·ªõc ƒë√≥!");
            Assert.fail("‚ö† L·ªói: M√£ ng√†nh ch∆∞a ƒë∆∞·ª£c t·∫°o tr∆∞·ªõc ƒë√≥!");
        }
    }



    @Test(priority = 4)
    public void testXoaNganh() throws InterruptedException {
        System.out.println("\uD83D\uDD39 Testcase: TC4: X√≥a ng√†nh h·ªçc");
        LienhePage lienhe = new LienhePage(driver);

        if (generatedMaNganh != null) {
            lienhe.nhaptimkiem(generatedMaNganh);
            Thread.sleep(2000);

            String xpathKetQua = "//table/tbody/tr[1]/td[2]";
            WebElement ketQua = driver.findElement(By.xpath(xpathKetQua));
            if (ketQua.getText().trim().equals(generatedMaNganh)) {
                lienhe.clickXoanganh();
                Thread.sleep(2000);
                lienhe.nhaptimkiem(generatedMaNganh);
                boolean isDeleted = driver.findElements(By.xpath(xpathKetQua)).isEmpty();
                if (isDeleted) {
                    System.out.println("‚úÖ PASS: M√£ ng√†nh ƒë√£ ƒë∆∞·ª£c x√≥a th√†nh c√¥ng.");
                } else {
                    System.out.println("‚ùå FAIL: M√£ ng√†nh v·∫´n t·ªìn t·∫°i sau khi x√≥a!");
                }
                Assert.assertTrue(isDeleted);
            } else {
                System.out.println("‚ùå FAIL: Kh√¥ng t√¨m th·∫•y ƒë√∫ng m√£ ng√†nh c·∫ßn x√≥a!");
            }
        } else {
            System.out.println("‚ö† L·ªói: Kh√¥ng c√≥ m√£ ng√†nh n√†o ƒë·ªÉ x√≥a!");
        }
    }

    @Test(priority = 5)
    public void clickzoom() throws InterruptedException {
        System.out.println("üîπ Testcase: TC5:Zoom m√†n h√¨nh");
        LienhePage lienhe = new LienhePage(driver);
        lienhe.clickzoom();
        lienhe.clickzoom();
    }
    @Test(priority = 6)
    public void testThemNguoiDung() throws InterruptedException {
        System.out.println("üîπ Testcase 6: Th√™m ng∆∞·ªùi d√πng");

        LienhePage lienhe = new LienhePage(driver);
        Random random = new Random();

        // üîπ T·∫°o th√¥ng tin ng∆∞·ªùi d√πng ng·∫´u nhi√™n
        generatedMaGV = "t" + (100 + random.nextInt(900));  // üîπ L∆∞u l·∫°i m√£ gi·∫£ng vi√™n
        String TenGiangVien = "NTT" + generatedMaGV.toLowerCase();
        String Email = TenGiangVien + random.nextInt(900) + "@vanlanguni.vn";

        lienhe.openNguoiDungPage();
        lienhe.clickThemNguoiDung();
        lienhe.nhapThongTinNguoiDung(generatedMaGV, TenGiangVien, Email);
        lienhe.chonLoaiGV();
        lienhe.Role();
        lienhe.clickLuuNguoiDung();

        Thread.sleep(3000); // ƒê·ª£i ph·∫£n h·ªìi t·ª´ h·ªá th·ªëng

        // üîπ Ki·ªÉm tra xem ng∆∞·ªùi d√πng ƒë√£ ƒë∆∞·ª£c th√™m th√†nh c√¥ng ch∆∞a
        lienhe.timKiemNguoiDungTheoTenGV(generatedMaGV);
        String xpathKetQua = "//table/tbody/tr[1]/td[2]";
        WebElement ketQua = driver.findElement(By.xpath(xpathKetQua));
        String actualMaGV = ketQua.getText().trim();

        if (actualMaGV.equals(generatedMaGV)) {
            System.out.println("‚úÖ PASS: ƒê√£ th√™m th√†nh c√¥ng ng∆∞·ªùi d√πng v·ªõi m√£ gi·∫£ng vi√™n: " + generatedMaGV);
        } else {
            System.out.println("‚ùå FAIL: Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng v·ª´a th√™m! (Th·ª±c t·∫ø: \"" + actualMaGV + "\", Mong ƒë·ª£i: \"" + generatedMaGV + "\")");
        }
        Assert.assertEquals(actualMaGV, generatedMaGV);
    }


    @Test(priority = 7, dependsOnMethods = "testThemNguoiDung")
    public void testTimKiemNguoiDung() throws InterruptedException {
        System.out.println("\uD83D\uDD39 Testcase: TC7: T√¨m ki·∫øm gi·∫£ng vi√™n v·ª´a t·∫°o");

        Assert.assertNotNull(generatedMaGV, "‚ùå M√£ gi·∫£ng vi√™n b·ªã null!");
        Assert.assertFalse(generatedMaGV.isEmpty(), "‚ùå M√£ gi·∫£ng vi√™n r·ªóng!");

        LienhePage lienhe = new LienhePage(driver);
        lienhe.timKiemNguoiDungTheoTenGV(generatedMaGV);

        WebDriverWait wait = new WebDriverWait(driver, 10);
        String xpathKetQua = "//table/tbody/tr[1]/td[2]";

        WebElement ketQua = wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath(xpathKetQua)));
        String actualMaGV = ketQua.getText().trim();

        if (actualMaGV.equals(generatedMaGV)) {
            System.out.println("‚úÖ PASS: ƒê√£ t√¨m ki·∫øm ƒë√∫ng gi·∫£ng vi√™n: " + actualMaGV);
        } else {
            System.out.println("‚ùå FAIL: M√£ gi·∫£ng vi√™n t√¨m ki·∫øm kh√¥ng kh·ªõp! (Th·ª±c t·∫ø: \"" + actualMaGV + "\", Mong ƒë·ª£i: \"" + generatedMaGV + "\")");
        }
        Assert.assertEquals(actualMaGV, generatedMaGV);
    }

    @Test(priority = 8, dependsOnMethods = "testTimKiemNguoiDung")
    public void testXoaNguoiDung() throws InterruptedException {
        System.out.println("\uD83D\uDD39 Testcase: TC8: X√≥a gi·∫£ng vi√™n v·ª´a t√¨m ki·∫øm");
        LienhePage lienhe = new LienhePage(driver);

        lienhe.clickXoaNguoiDung(generatedMaGV);
        lienhe.timKiemNguoiDungTheoTenGV(generatedMaGV);

        String xpathKetQua = "//table/tbody/tr[1]/td[2]";
        boolean isDeleted = driver.findElements(By.xpath(xpathKetQua)).isEmpty();

        if (isDeleted) {
            System.out.println("‚úÖ PASS: ƒê√£ x√≥a th√†nh c√¥ng gi·∫£ng vi√™n: " + generatedMaGV);
        } else {
            System.out.println("‚ùå FAIL: Ng∆∞·ªùi d√πng ch∆∞a b·ªã x√≥a!");
        }
        Assert.assertTrue(isDeleted, "‚ùå Ng∆∞·ªùi d√πng ch∆∞a b·ªã x√≥a!");
    }
}
